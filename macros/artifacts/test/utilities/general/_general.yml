version: 2

macros:
  - name: __select_test_result
    description: |
      Build select statement containing all parsable fields from the test result node.

      List of fields:
      - `test_name`:
        Value generated by dbt, sometime having hashed value e.g. dq_tools_relationships_where_d_54ea91e37e41670064d820d826bfea36

      - `test_name_long`:
        Value generated by dbt without hashed string e.g. dq_tools_relationships_where_db_data_test_relationships_a_a_id__b_id__ref_data_test_relationships_b___b_id_0

      - `test_severity_config`:
        Severity value was configued to the test e.g. warn, error

      - `test_kpi_category_config`:
        KPI Category was configured to the test via `config.kpi_category` or `meta.kpi_category` or auto-assigned based on test name.
        See {{'{{'}} __get_kpi_categorize {{'}}'}}

      - `dq_issue_type`:
        Same behaviour as `test_kpi_category_config`.
        See {{'{{'}} __get_dq_issue_type {{'}}'}}

      - `test_result`:
        Value generated by dbt which are pass, fail or skip

      - `table_name`:
        Relation string value consists of {database}.{schema}.{table}.
        And if having `where` config, it will become the subquery `(select * from {database}.{schema}.{table} where {where}) as dbt_subquery

      - `ref_table`:
        Relation string value consists of {database}.{schema}.{table} if the test is type of relationship.
        See {{'{{'}} __get_to_relation {{'}}'}}

      - `column_name`:
        Combination of column names which related to the model's test defined

      - `ref_column`:
        Column name of the referenced model where the relationship test is defined

      - `no_of_records`:
        Count(*) from the `table_name`

      - `no_of_records_failed`:
        Value generated by dbt which is `result.failures`

      - `test_type`:
        General type of the test which are singular or generic.
        See {{'{{'}} __get_test_type {{'}}'}}

      - `test_description`:
        Description of a test.

      - `execution_time_seconds`:
        Value generated by dbt which is `result.execution_time`

      - `file_test_defined`:
        Value generated by dbt which is `result.node.original_file_path`

      - `dbt_target_name`:
        Value taken from `target.name`

      - `dbt_invocation_id`:
        Invocation ID that generated by dbt

      - `_audit_account_id`:
        Account ID - Placeholder if we're using dbt Cloud, configured via the environment variable

      - `_audit_project_id`:
        Project ID - builtin environment variable in dbt Cloud [here](https://docs.getdbt.com/docs/dbt-cloud/using-dbt-cloud/cloud-environment-variables#special-environment-variables)

      - `_audit_job_id`:
        Job ID - builtin environment variable in dbt Cloud [here](https://docs.getdbt.com/docs/dbt-cloud/using-dbt-cloud/cloud-environment-variables#special-environment-variables)

      - `_audit_run_id`:
        Run ID - builtin environment variable in dbt Cloud [here](https://docs.getdbt.com/docs/dbt-cloud/using-dbt-cloud/cloud-environment-variables#special-environment-variables)

      - `_audit_run_url`:
        The URL of dbt Cloud's run built from the `_audit` IDs.
        Sample value: https://cloud.getdbt.com/#/accounts/{_audit_account_id}/projects/{_audit_project_id}/runs/{_audit_run_id}

      - `_timestamp`:
        The timestamp when the test result is recorded

  - name: __get_test_model
    description: |
      Return a dict specifying some info of the model where test is performed

      The dict object schema:
      ```python
      {
        'type': 'string: value is [ref or source]',
        'name': 'string: model name',
        'package_name': 'string: available if type=ref',
        'source_name': 'string: available if type=source'
      }
      ```
      if the dict's type currently supporting: ref, source. Otherwise return as `None`.
  - name: __get_test_name
    description: Return test (function) name
  - name: __get_test_type
    description: Return test type which is singular or generic
  - name: __get_where_subquery
    description: |
      Return the relation string of the model:
      ```
      {database}.{schema}.{table}
      ```

      But if there is a config.where presenting it will become the subquery:
      ```
      (select * from {database}.{schema}.{table} where {where}) as dbt_subquery
      ```
  
  - name: __get_test_model_materialization
    description: |
      Return the materialization type of the model being tested (eg: table, view, ephemeral etc).
  

  - name: __get_test_description
    description: |
      This macro retrieves the description of a test from a test node object.
      If the description is not defined, it generates one based on the test type (e.g., unique, not_null, accepted_values, or relationships). 
      Available for tests starting in dbt v1.9. 
      Returns an empty string if no description is found or generated.
    arguments:
      - name: test_node
        type: string
        description: The unique identifier of the test node in the graph
    return_value: (string) The test description or an empty string if none is found.